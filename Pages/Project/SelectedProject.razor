@page "/projects/{Id:int}"
@attribute [Authorize]

@using Microsoft.AspNetCore.Identity
@using hephaestus.Models
@using hephaestus.Services
@using hephaestus.Forms.Core
@inject AuthStateService AuthStateService
@inject InviteService InviteService
@inject ProjectService ProjectService
@inject ToastService ToastService
@inject UserManager<User> UserManager
@inject TicketService TicketService


@if(errorMessage != null)
{
    <h1>@errorMessage</h1>
}
else
{
    @if(project == null)
    {
        <p>Loading ...</p>
    }
    else
    {
        <div class="container-fluid">
            <div class="row">
                <div class="col-12 col-md-3 p-3" align="center">
                    <div class="card mt-3" style="width: 26rem;">
                        <div class="card-body">
                            <h5 class="card-title">@project.Name</h5>
                            <p class="card-text">@project.Repository.Name</p>
                            <p class="card-text">@project.Repository.Description</p>
                            <a href="@project.Repository.HtmlUrl">View on Github</a>
                        </div>
                    </div>                
                    <p>
                        <button style="width: 10rem;" type="button" class="btn btn-primary mt-3" data-toggle="modal" data-target="#contributorsModal">
                            Contributors
                        </button>
                        <button style="width: 10rem;" type="button" class="btn btn-primary mt-3" data-toggle="modal" data-target="#invitesModal">
                            Invites
                        </button>
                    </p>
                </div>
                <div class="col-12 col-md-6 p-3" align="center">
                    @foreach (var ticket in tickets)
                    {
                        <div class="card mt-3" style="width: 24rem;">
                            <div class="card-body">
                                <h5 class="card-title">@ticket.Name</h5>
                                <h6 class="card-text">@ticket.Status</h6>
                                <p class="card-text">@ticket.Description</p>
                                @if (ticket.Assignees != null)
                                {
                                    @foreach (var assignee in ticket.Assignees)
                                    {
                                        <p><span style="font-size: 24px; width: 12rem" class="badge badge-info">@assignee.Assignee.UserName</span></p>
                                    }
                                }
                                <p>
                                    <button type="button" class="btn btn-primary mt-3" data-toggle="modal" data-target="#assignUserModal" @onclick="@(async e => await SelectTicket(ticket))">
                                        Assign New User
                                    </button>
                                 </p>
                            </div>
                        </div>  
                    }
                <button style="width: 20rem;" type="button" class="btn btn-warning mt-3" data-toggle="modal" data-target="#createTicketModal">
                    Create Ticket
                </button>
                </div>
                <div class="col-12 col-md-3 p-3" align="center">
                </div>
            </div>
        </div>
    }
}


<div class="modal fade" id="invitesModal" tabindex="-1" role="dialog" aria-labelledby="invitesModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="invitesModalTitle">Invites</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if(invites == null)
                {
                    <p>Loading ... </p>
                }
                else
                {
                    @foreach(var invite in invites)
                    {
                        <div class="card mt-3" style="width: 18rem;">
                            <div class="card-body">
                                <h5 class="card-title">@invite.User.UserName</h5>
                                <h6 class="card-title">@invite.Status</h6>
                                <p class="card-text">@invite.Message</p>
                                <button class="btn btn-danger" @onclick="@(async e => await CancelInvite(invite))">Cancel</button>
                            </div>
                        </div> 
                    }
                }

                <EditForm Model="@createInviteForm" OnValidSubmit="@HandleValidCreateInviteSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="username">UserName</label>
                        <InputText class="form-control" id="username" placeholder="Enter UserName" @bind-Value="createInviteForm.UserName" />
                        <label for="message">Message for User</label>
                        <InputText class="form-control" id="message" placeholder="Enter Message" @bind-Value="createInviteForm.Message" />
                    </div>
                    <button type="submit" class="btn btn-primary">Send Invite</button>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="contributorsModal" tabindex="-1" role="dialog" aria-labelledby="contributorsModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="contributorsModalTitle">Contributors</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if(contributors== null)
                {
                    <p>Loading ... </p>
                }
                else
                {
                    foreach (var contributor in contributors)
                    {
                        <div class="card mt-3" style="width: 18rem;">
                            <div class="card-body">
                                <h5 class="card-title">@contributor.Contributor.UserName</h5>
                                <h6 class="card-title">@contributor.Contributor.Email</h6>
                                <button class="btn btn-danger" @onclick="@(async e => await RemoveContributor(contributor))">Cancel</button>
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="createTicketModal" tabindex="-1" role="dialog" aria-labelledby="createTicketModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createTicketModalTitle">New Ticket</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@createTicketForm" OnValidSubmit="@HandleValidCreateTicketSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div class="form-group">
                        <label for="name">Ticket`s Name</label>
                        <InputText class="form-control" id="name" placeholder="Enter Tickets`s Name" @bind-Value="createTicketForm.Name" />
                        <label for="description">Ticket`s Description</label>
                        <InputText class="form-control" id="description" placeholder="Enter Ticket`s Description" @bind-Value="createTicketForm.Description" />
                    </div>
                    <button type="submit" class="btn btn-primary">Submit</button>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="assignUserModal" tabindex="-1" role="dialog" aria-labelledby="assignUserModalTitle" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="assignUserModalTitle">Assign User</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                @if(contributors== null)
                {
                    <p>Loading ... </p>
                }
                else
                {
                    foreach (var contributor in contributors)
                    {
                        <div class="card mt-3" style="width: 18rem;">
                            <div class="card-body">
                                <h5 class="card-title">@contributor.Contributor.UserName</h5>
                                <h6 class="card-title">@contributor.Contributor.Email</h6>
                                <button class="btn btn-danger" @onclick="@(async e => await AssignUserToTicket(selectedTicket, contributor.Contributor))">Assign</button>
                            </div>
                        </div>
                    }
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


@code
{
    [Parameter]
    public int Id { get; set; }
    private string errorMessage = null;

    private Project project;
    private User user;
    private List<Invite> invites;
    private List<UserProject> contributors;
    private List<Ticket> tickets;
    private bool isOwner;
    
    private CreateInviteForm createInviteForm = new CreateInviteForm();
    private CreateTicketForm createTicketForm = new CreateTicketForm();

    private Ticket selectedTicket;
    
    protected override async Task OnInitializedAsync()
    {
        project = await ProjectService.FindById(Id);
        if(project == null)
        {
            errorMessage = "Project does not exist";
            return;
        }

        user = await AuthStateService.GetUser();
        if(project.Owner.Id != user.Id && !(await ProjectService.IsContributor(project, user)))
        {
            errorMessage = "Access denied";
            return;
        }

        if (project.Owner.Id == user.Id)
        {
            isOwner = true;
        }

        invites = project.Invites;
        contributors = project.Contributors;
        tickets = project.Tickets;
    }

    private async Task HandleValidCreateInviteSubmit()
    {
        var success = await InviteService.CreateInvite(project, createInviteForm.UserName, createInviteForm.Message);
        if(success)
        {
            StateHasChanged();
        }
    }

    private async Task CancelInvite(Invite invite)
    {
        await InviteService.DeleteInvite(invite);
        StateHasChanged();
    }

    private async Task RemoveContributor(UserProject contributor)
    {
        await ProjectService.DeleteContributor(contributor);
        StateHasChanged();
    }

    private async Task HandleValidCreateTicketSubmit()
    {
        var success = await TicketService.CreateTicket(project, createTicketForm.Name, createTicketForm.Description);
        if (success)
        {
            StateHasChanged();
        }
    }

    private async Task AssignUserToTicket(Ticket ticket, User user)
    {
        var success = await TicketService.AssignUser(ticket, user);
        if (success)
        {
            StateHasChanged();
        }
    }

    private async Task SelectTicket(Ticket ticket)
    {
        selectedTicket = ticket;
    }
}
